import time
import psutil
from datetime import datetime
import threading
import telebot
import os
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
BOT_TOKEN = os.getenv('BOT_TOKEN')
CHAT_ID = os.getenv('CHAT_ID')  # ID —á–∞—Ç–∞ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π

# –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –±–æ—Ç–∞
bot = telebot.TeleBot('BOT_TOKEN')

# –°–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–≤—ã—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
game_process_names = ['game.exe', 'steam.exe', 'minecraft.exe']

# –°–ª–æ–≤–∞—Ä–∏ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Å –±–ª–æ–∫–∏—Ä–æ–≤–∫–æ–π –ø–æ—Ç–æ–∫–æ–≤
data_lock = threading.Lock()
start_times = {}
total_play_time = {}

def send_notification(message):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram"""
    try:
        if CHAT_ID:
            bot.send_message(CHAT_ID, message)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")

def format_time(seconds):
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –≤ —É–¥–æ–±–æ—á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥"""
    hours = int(seconds // 3600)
    minutes = int((seconds % 3600) // 60)
    seconds = int(seconds % 60)
    return f"{hours:02d}:{minutes:02d}:{seconds:02d}"

def check_games():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø—É—â–µ–Ω–Ω—ã—Ö –∏–≥—Ä"""
    current_games = set()
    for proc in psutil.process_iter(['pid', 'name']):
        try:
            pname = proc.info['name']
            if pname in game_process_names:
                current_games.add(pname)
                with data_lock:
                    if pname not in start_times:
                        start_times[pname] = datetime.now()
                        message = f"üéÆ –ò–≥—Ä–∞ {pname} –∑–∞–ø—É—â–µ–Ω–∞ –≤ {start_times[pname].strftime('%H:%M:%S')}"
                        print(message)
                        send_notification(message)
        except (psutil.NoSuchProcess, psutil.AccessDenied, psutil.ZombieProcess):
            continue

    with data_lock:
        stopped_games = set(start_times.keys()) - current_games
        for pname in stopped_games:
            end_time = datetime.now()
            play_time = (end_time - start_times[pname]).total_seconds()
            total_play_time[pname] = total_play_time.get(pname, 0) + play_time
            formatted_time = format_time(play_time)
            message = f"‚èπÔ∏è –ò–≥—Ä–∞ {pname} –∑–∞–∫—Ä—ã—Ç–∞ –≤ {end_time.strftime('%H:%M:%S')}\n–í—Ä–µ–º—è —Å–µ—Å—Å–∏–∏: {formatted_time}"
            print(message)
            send_notification(message)
            del start_times[pname]

def get_play_times_text():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏–≥—Ä–æ–≤–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏"""
    with data_lock:
        if not total_play_time and not start_times:
            return "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—É—Å—Ç–∞. –ü–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ–± –∏–≥—Ä–∞—Ö."
        
        text = "üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–≥—Ä–æ–≤–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏:**\n\n"
        
        # –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏
        if total_play_time:
            text += "üèÅ **–ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏:**\n"
            for game, seconds in total_play_time.items():
                formatted_time = format_time(seconds)
                text += f"  ‚Ä¢ {game}: {formatted_time}\n"
        
        # –¢–µ–∫—É—â–∏–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∏–≥—Ä—ã
        if start_times:
            text += "\nüü¢ **–ê–∫—Ç–∏–≤–Ω—ã–µ —Å–µ–π—á–∞—Å:**\n"
            current_time = datetime.now()
            for game, start_time in start_times.items():
                current_session = (current_time - start_time).total_seconds()
                formatted_time = format_time(current_session)
                text += f"  ‚Ä¢ {game}: {formatted_time} (–∞–∫—Ç–∏–≤–Ω–∞)\n"
        
        return text

@bot.message_handler(commands=['start'])
def send_welcome(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    welcome_text = """
üéÆ **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ò–≥—Ä!**

–≠—Ç–æ—Ç –±–æ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç –≤—Ä–µ–º—è, –ø—Ä–æ–≤–µ–¥–µ–Ω–Ω–æ–µ –≤ –∏–≥—Ä–∞—Ö, –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É.

üìã **–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**
/start - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
/status - –¢–µ–∫—É—â–∏–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∏–≥—Ä—ã
/stats - –ü–æ–ª–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤—Ä–µ–º–µ–Ω–∏
/help - –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º


üîî –í—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–ø—É—Å–∫–µ –∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –∏–≥—Ä –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏!
    """
    bot.reply_to(message, welcome_text, parse_mode='Markdown')

@bot.message_handler(commands=['status'])
def send_status(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /status"""
    with data_lock:
        if not start_times:
            bot.reply_to(message, "üî∏ –°–µ–π—á–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏–≥—Ä")
            return
        
        text = "üü¢ **–ê–∫—Ç–∏–≤–Ω—ã–µ –∏–≥—Ä—ã:**\n\n"
        current_time = datetime.now()
        for game, start_time in start_times.items():
            session_time = (current_time - start_time).total_seconds()
            formatted_time = format_time(session_time)
            start_time_str = start_time.strftime('%H:%M:%S')
            text += f"üéÆ {game}\n"
            text += f"  ‚è∞ –ó–∞–ø—É—â–µ–Ω–∞: {start_time_str}\n"
            text += f"  ‚è±Ô∏è –í—Ä–µ–º—è —Å–µ—Å—Å–∏–∏: {formatted_time}\n\n"
    
    bot.reply_to(message, text, parse_mode='Markdown')

@bot.message_handler(commands=['stats'])
def send_stats(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /stats"""
    stats_text = get_play_times_text()
    bot.reply_to(message, stats_text, parse_mode='Markdown')

@bot.message_handler(commands=['help'])
def send_help(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    help_text = """
üìö **–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º:**

üîπ `/start` - –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
üîπ `/status` - –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∏–≥—Ä—ã –∏ –≤—Ä–µ–º—è —Ç–µ–∫—É—â–∏—Ö —Å–µ—Å—Å–∏–π
üîπ `/stats` - –ü–æ–ª–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –∏–≥—Ä—ã (–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ + –∞–∫—Ç–∏–≤–Ω—ã–µ)
üîπ `/help` - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞

üîî **–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:**
‚Ä¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –∏–≥—Ä—ã
‚Ä¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –∏–≥—Ä—ã —Å –≤—Ä–µ–º–µ–Ω–µ–º —Å–µ—Å—Å–∏–∏

üõ† **–û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:**
""" + "\n".join([f"‚Ä¢ {game}" for game in game_process_names])
    
    bot.reply_to(message, help_text, parse_mode='Markdown')

def monitor_games():
    """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏–≥—Ä"""
    while True:
        try:
            check_games()
            time.sleep(5)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ: {e}")
            time.sleep(10)

def bot_polling():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
    print("–ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞...")
    while True:
        try:
            bot.polling(none_stop=True, interval=3, timeout=30)
        except Exception as ex:
            print(f"–û—à–∏–±–∫–∞ –±–æ—Ç–∞, –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ 30 —Å–µ–∫: {ex}")
            time.sleep(30)

if __name__ == "__main__":
    print("–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏–≥—Ä —Å Telegram –±–æ—Ç–æ–º –∑–∞–ø—É—â–µ–Ω...")
    
    # –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    monitor_thread = threading.Thread(target=monitor_games, daemon=True)
    monitor_thread.start()
    
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    bot_thread = threading.Thread(target=bot_polling, daemon=True)
    bot_thread.start()
    
    print("–°–∏—Å—Ç–µ–º–∞ –∑–∞–ø—É—â–µ–Ω–∞. –í–≤–µ–¥–∏—Ç–µ 'exit' –¥–ª—è –≤—ã—Ö–æ–¥–∞.")
    while True:
        cmd = input().strip().lower()
        if cmd == 'exit':
            print("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...")
            break
